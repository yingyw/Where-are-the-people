import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.RecursiveTask;


public class ProcessGridPop extends RecursiveTask<int[][]> {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public static ForkJoinPool fjPool = new ForkJoinPool();
	static final int SEQUENTIAL_THRESHOLD=100;
	CensusData file;
	int hi;
	int lo;
    int[][] result;
    int col;
    int row;
    Rectangle bound;
	public ProcessGridPop(CensusData file, int lo, int hi){
		this.file = file;
		this.hi = hi;
		this.lo = lo;
		result = new int[lo][hi];
	}
	
	@Override
	protected int[][] compute() {
		if(hi - lo <= SEQUENTIAL_THRESHOLD){
			for (int i = lo; i < hi; i++) {
				CensusGroup grid = file.data[i];
				float lon = grid.longitude;
				float lag = grid.latitude;
				double col = result.length * (lon - bound.left)
						/ (bound.right - bound.left);
				int posCol = (int) col;
				double row = result[0].length * (lag - bound.bottom)
						/ (bound.top - bound.bottom);
				int posRow = (int) row;
				if (posCol == result.length) {
					posCol = posCol - 1;
				}
				if (posRow == result[0].length) {
					posRow = posRow - 1;
				}
				result[posCol][posRow] += grid.population;
			}
			return result;
		}else {
			ProcessGridPop left = new ProcessGridPop(file,lo,(lo+hi)/2);
			ProcessGridPop right = new ProcessGridPop(file,(lo+hi)/2,hi);

			left.fork();
			int[][] rightside = right.compute();
			int[][] leftside = left.join();
			fjPool.invoke(new SumGrid(leftside,rightside,0,rightside.length,rightside[0].length,0));
			return rightside;
		}

	}
	
	class SumGrid extends RecursiveAction{
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		int[][] lGrid;
		int[][] rGrid;
		int left;
		int right;
		int top;
		int bottom;
		static final int SEQUENTIAL_CUTOFF=100;
		public SumGrid(int[][] lGrid,int[][] rGrid, int left, int right,int top,int bottom){
			this.lGrid=lGrid;
			this.rGrid = rGrid;
			this.left=left;
			this.right=right;
			this.top=top;
			this.bottom=bottom;
		}
		@Override
		protected void compute(){
			if(hi-lo<SEQUENTIAL_CUTOFF){
				for(int i=lo;i<hi;i++){
					for(int j=bottom;j<top;j++){
						rGrid[i][j]+=lGrid[i][j];
					}
				}
			}else{
				SumGrid topLeft = new SumGrid(lGrid,rGrid,left,(left+right)/2,top,(bottom+top)/2);
				SumGrid topRight = new SumGrid(lGrid,rGrid,(left+right)/2,right,top,(bottom+top)/2);
				SumGrid bottomLeft = new SumGrid(lGrid,rGrid,left,(left+right)/2,(bottom+top)/2,bottom);
				SumGrid bottomRight = new SumGrid(lGrid,rGrid,(left+right)/2,right,(bottom+top)/2,bottom);
				
				topLeft.fork();
				topRight.fork();
				bottomLeft.fork();
				bottomRight.compute();
				topLeft.join();
				topRight.join();
				bottomLeft.join();
			}
		}
	}
	


}
