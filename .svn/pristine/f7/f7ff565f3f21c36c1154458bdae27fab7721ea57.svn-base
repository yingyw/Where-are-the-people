/**
 * Yingying Wang (yingyw)
 * Xiaoyan Chen(h13579)
 * CSE332 Projects 3
 */
/**
 * This class extends VersionOne and implements VersionBase. A version of the
 * population queries that uses a single thread and 2D lists to find boundaries
 * of population map and find sub_population of a query
 * 
 */
public class VersionThree extends VersionOne implements VersionBase {
	private CensusData file;
	private Rectangle target;
	private int[][] grids;

	/**
	 * Construct a new Version One process with given file,columns, rows and
	 * target query
	 * 
	 * @param file
	 *            data to go analyze
	 * @param x
	 *            number of columns to divide map
	 * @param y
	 *            number of rows to divide map
	 * @param target
	 *            target query to find population in
	 */
	public VersionThree(CensusData file, int x, int y, Rectangle target) {
		super(file, x, y, target);
		this.file = file;
		this.target = target;
		grids = new int[x][y];
		gridPopulation();
		grids = gridSum(grids);
	}

	/**
	 * Calculate population inside target query and returns this population
	 */
	
	public int getTargetPopulation(Rectangle target) {
		int total = 0;
		int west = (int) (target.left - 1);
		int east = (int) (target.right - 1);
		int north = (int) target.top - 1;
		int south = (int) target.bottom - 1;
		int rightB = grids[east][north];
		int rightT = 0;
		if (south - 1 >= 0) {
			rightT = grids[east][south - 1];
		}
		int leftB = 0;
		if (west - 1 >= 0) {
			leftB = grids[west - 1][north];
		}
		int leftT = 0;
		if (west - 1 >= 0 && south - 1 >= 0) {
			leftT = grids[west - 1][south - 1];
		}
		total = rightB - rightT - leftB + leftT;

		return total;
	}

	/**
	 * Calculates the population in each grid position.
	 * @return 
	 */
	public int[][] gridPopulation() {
		Rectangle bound = scaleBoundary();
		for (int i = 0; i <= file.data_size - 1; i++) {
			CensusGroup grid = file.data[i];
			float lon = grid.longitude;
			float lag = grid.latitude;
			double col = grids.length * (lon - bound.left)
					/ (bound.right - bound.left);
			int posCol = (int) col;
			double row = grids[0].length * (lag - bound.bottom)
					/ (bound.top - bound.bottom);
			int posRow = (int) row;
			if (posCol == grids.length) {
				posCol = posCol - 1;
			}
			if (posRow == grids[0].length) {
				posRow = posRow - 1;
			}
			grids[posCol][posRow] += grid.population;
		}
		return grids;
	}

	/**
	 * Calculates total population from the first position to the current
	 * position and stores it in each grid position.
	 */
	public int[][] gridSum(int[][] grids) {

		for (int i = 1; i < grids.length; i++) {
			grids[i][0] = grids[i][0] + grids[i - 1][0];
		}
		for (int j = 1; j < grids[0].length; j++) {
			grids[0][j] = grids[0][j] + grids[0][j - 1];
		}
		for (int i = 1; i < grids.length; i++) {
			for (int j = 1; j < grids[0].length; j++) {
				grids[i][j] = grids[i][j] + grids[i - 1][j] + grids[i][j - 1]
						- grids[i - 1][j - 1];
			}

		}
		return grids;

	}

}